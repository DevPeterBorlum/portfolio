{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\pa_em\\\\theistest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Users\\\\pa_em\\\\theistest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\pa_em\\\\theistest\\\\src\\\\components\\\\ToDoList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nexport default function ToDoList() {\n  const _React$useState = React.useState([{\n    text: \"vasketid\",\n    isCompleted: true,\n    id: 1\n  }, {\n    text: \"indkøb\",\n    isCompleted: false,\n    id: 2\n  }]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        listPoints = _React$useState2[0],\n        setlistPoints = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        inputText = _React$useState4[0],\n        setInputText = _React$useState4[1];\n\n  const toggleListItem = id => {\n    const listCopy = [...listPoints].map(listPoint => {\n      if (listPoint.id === id) {\n        return _objectSpread({}, listPoint, {\n          isCompleted: !listPoint.isCompleted\n        });\n      }\n\n      return listPoint;\n    });\n  };\n\n  const addListItem = textOfListItem => {\n    const newList = [...listPoints, {\n      text: textOfListItem,\n      isCompleted: false,\n      id: Math.floor(Math.random() * 1000)\n    }];\n    setlistPoints(newList);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, listPoints.map(listPoint => React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"(listPoint.isCompleted ?  \", React.createElement(\"strike\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, listPoint.text), \" : \", listPoint.text, \")\"))), React.createElement(\"input\", {\n    type: \"text\",\n    value: inputText,\n    onChange: event => setInputText(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => {\n      addListItem(inputText);\n      setInputText('');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Click me\"));\n}","map":{"version":3,"sources":["C:/Users/pa_em/theistest/src/components/ToDoList.js"],"names":["React","ToDoList","useState","text","isCompleted","id","listPoints","setlistPoints","inputText","setInputText","toggleListItem","listCopy","map","listPoint","addListItem","textOfListItem","newList","Math","floor","random","event","target","value"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA,0BACGD,KAAK,CAACE,QAAN,CAAe,CACjD;AACIC,IAAAA,IAAI,EAAE,UADV;AAEIC,IAAAA,WAAW,EAAE,IAFjB;AAGIC,IAAAA,EAAE,EAAE;AAHR,GADiD,EAOjD;AACIF,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,WAAW,EAAE,KAFjB;AAGIC,IAAAA,EAAE,EAAE;AAHR,GAPiD,CAAf,CADH;AAAA;AAAA,QAC1BC,UAD0B;AAAA,QACdC,aADc;;AAAA,2BAcCP,KAAK,CAACE,QAAN,CAAe,EAAf,CAdD;AAAA;AAAA,QAc1BM,SAd0B;AAAA,QAcfC,YAde;;AAiBjC,QAAMC,cAAc,GAAIL,EAAD,IAAM;AAC3B,UAAMM,QAAQ,GAAG,CAAC,GAAGL,UAAJ,EAAgBM,GAAhB,CAAqBC,SAAD,IAAa;AAE9C,UAAIA,SAAS,CAACR,EAAV,KAAiBA,EAArB,EAAyB;AACrB,iCAAWQ,SAAX;AAAsBT,UAAAA,WAAW,EAAC,CAACS,SAAS,CAACT;AAA7C;AACH;;AACD,aAAOS,SAAP;AACH,KANgB,CAAjB;AAOD,GARD;;AAUA,QAAMC,WAAW,GAAIC,cAAD,IAAkB;AACpC,UAAMC,OAAO,GAAG,CACZ,GAAGV,UADS,EAEZ;AACIH,MAAAA,IAAI,EAACY,cADT;AAEIX,MAAAA,WAAW,EAAE,KAFjB;AAGIC,MAAAA,EAAE,EAAEY,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B;AAHR,KAFY,CAAhB;AASAZ,IAAAA,aAAa,CAACS,OAAD,CAAb;AACD,GAXD;;AAcA,SACI,0CACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,UAAU,CAACM,GAAX,CAAeC,SAAS,IAEvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASA,SAAS,CAACV,IAAnB,CAD1B,SAC+DU,SAAS,CAACV,IADzE,MAFD,CADH,CADE,EAUF;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEK,SAA1B;AAAqC,IAAA,QAAQ,EAAGY,KAAD,IAASX,YAAY,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVE,EAWF;AAAQ,IAAA,OAAO,EAAE,MAAI;AAACR,MAAAA,WAAW,CAACN,SAAD,CAAX;AAAwBC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AAAiB,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXE,CADJ;AAeD","sourcesContent":["import React from \"react\";\r\n\r\nexport default function ToDoList() {\r\n  const [listPoints, setlistPoints] = React.useState([\r\n    {\r\n        text: \"vasketid\",\r\n        isCompleted: true,\r\n        id: 1\r\n        \r\n    },\r\n    {\r\n        text: \"indkøb\",\r\n        isCompleted: false, \r\n        id: 2\r\n    }\r\n]  );\r\n  const [inputText, setInputText] = React.useState('');\r\n\r\n\r\n  const toggleListItem = (id)=>{\r\n    const listCopy = [...listPoints].map((listPoint)=>{\r\n        \r\n        if (listPoint.id === id) {\r\n            return {...listPoint, isCompleted:!listPoint.isCompleted}\r\n        }\r\n        return listPoint\r\n    })\r\n  }\r\n\r\n  const addListItem = (textOfListItem)=>{\r\n    const newList = [\r\n        ...listPoints, \r\n        {\r\n            text:textOfListItem,\r\n            isCompleted: false,\r\n            id: Math.floor(Math.random() * 1000)\r\n        }\r\n\r\n    ]    \r\n    setlistPoints(newList)\r\n  }\r\n\r\n\r\n  return (\r\n      <>\r\n    <ul>\r\n      {listPoints.map(listPoint => (\r\n        \r\n        <li>\r\n        (listPoint.isCompleted ?  <strike>{listPoint.text}</strike> : {listPoint.text})\r\n\r\n        </li>\r\n      ))}\r\n    </ul>\r\n    <input type=\"text\" value={inputText} onChange={(event)=>setInputText(event.target.value)}/>\r\n    <button onClick={()=>{addListItem(inputText); setInputText('')}}>Click me</button>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}